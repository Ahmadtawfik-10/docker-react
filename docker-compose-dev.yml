version: '3'
services:
  web:
    # build: . #this can't work because the docker file is not name Dockerfile, because this is the default file name that docker-compose looks for inside a build context (directory used to build the docker container)
    build:
    #context: defines either a path to a directory containing a Dockerfile, or a url to a git repository. (official definition)
      context: . #specify where is the files and folder used to build this service's image(specifying the build context), the location I use here will be the build context for the Dockerfile used, the . representes the current working directory as the docker-compose.yml presented in, if it was inside a folder I would have provided the path to it
      dockerfile: Dockerfile.dev #location of docker file to construct the image of this service
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules #specifing a volume to execlude the node_modules from mapping
      - .:/app #specifing a volume to map the current folder on the local machine to the app folder inside the container
  tests:
    # build: . #this can't work because the docker file is not name Dockerfile, because this is the default file name that docker-compose looks for inside a build context (directory used to build the docker container)
    build:
    #context: defines either a path to a directory containing a Dockerfile, or a url to a git repository. (official definition)
      context: . #specify where is the files and folder used to build this service's image(specifying the build context), the . representes the current working directory as the docker-compose.yml presented in, if it was inside a folder I would have provided the path to it
      dockerfile: Dockerfile.dev #location of docker file to construct the image of this service
    volumes:
      - /app/node_modules #specifing a volume to execlude the node_modules from mapping
      - .:/app #specifing a volume to map the current folder on the local machine to the app folder inside the container
    command: ["npm", "run", "test"] #override the default running command